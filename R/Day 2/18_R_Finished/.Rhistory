counts = as.integer(c(3,5)),
measurement=rnorm(6),
stringsAsFactors=F)
mydata.frame
library(data.table)
mytable = data.frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5)),
measurement=rnorm(2))
mytable
library(data.table)
mytable = data.table(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5)),
measurement=rnorm(2))
mytable
library(data.table)
mytable = data.table(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = c(3,5),
measurement=rnorm(2))
mytable
library(dplyr)
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5)),
measurement=rnorm(2))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5,1,6,4,6)),
measurement=rnorm(2))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5,1,6,4,6)),
measurement=rnorm(2))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = c(3,5,1,6,4,6),
measurement=rnorm(2))
my_dataframe
my_dataframe = data_frame(a = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
b = c(3,5,1,6,4,6),
x=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
b = c(3,5,1,6,4,6),
x=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
b = c(3,5,1,6,4,6),
x=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = c(3,5,1,6,4,6),
x=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = c(3,5,1,6,4,6),
measurement=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5,1,6,4,6)),
measurement=rnorm(6))
my_dataframe
my_dataframe = data_frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = as.integer(c(3,5,1,6,4,6)),
measurement=rnorm(6))
my_dataframe
class(mytable)
class(mydata.frame)
class(mytable)
class(my_dataframe)
library(tidyr)
library(dplyr)
library(reshape2)
library(readr)
insects <- read_delim("__Code/Class/18_R/data/Insects.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(insects)
head(insects)
class(insects)
names(insects) <- c("Region", "<10g", "10-20g", "20-30g", "30-40g", ">40g")
insects
gather(data = insects, key = weight, value = counts, -Region)
insects
insects = gather(data = insects, key = weight, value = counts, -Region)
insects
arrange(insects, Region)
?runif()
doubleinfo <- data.frame(
name = c("Ted", "Pauline", "Vera", "Angela", "Frank", "Pam"),
biometrics = c("179m", "173f", "174f", "159f", "188m", "163f"),
measurement = runif(6)
)
separate(data=doubleinfo, col=biometrics, into = c("height", "sex"), 3)
doubleinfo
doubleinfo = separate(data=doubleinfo, col=biometrics, into = c("height", "sex"), 3)
doubleinfo
?separate()
performance <- data.frame(
name = c("Pam", "Pam", "Nick", "Nick", "Kyle", "Kyle"),
performance = c("top", "low", "top", "low", "top", "low"),
measurement = c(13,4,12,2,9,5)
)
performance
performance = spread(data = perf, key=performance, value=counts)
performance
perf <- data.frame(
name = c("Pam", "Pam", "Nick", "Nick", "Kyle", "Kyle"),
performance = c("top", "low", "top", "low", "top", "low"),
measurement = c(13,4,12,2,9,5)
)
perf
performance = spread(data = perf, key=performance, value=counts)
performance
perf <- data.frame(
name = c("Pam", "Pam", "Nick", "Nick", "Kyle", "Kyle"),
performance = c("top", "low", "top", "low", "top", "low"),
counts = c(13,4,12,2,9,5)
)
perf
perf = spread(data = perf, key=performance, value=counts)
perf
df1 <- data.frame(name = c("Tom", "Ted", "Sue", "Frank", "Jim"),
height =c(177, 173, 181, 169, 188),
category =c("A", "F", "L", "A", "I"),
stringsAsFactors = F)
df2 <- data.frame(name = c( "Amy", "Sue", "Nataly", "Jim"),
weight =c(69, 55, 78, 81),
stringsAsFactors = F)
head(df1); head(df2)
inner_join(df1, df2)
left_join(df1, df2)
right_join(df1, df2)
full_join(df1, df2)
?anti_join
anti_join(df1, df2)
semi_join(df1, df2)
set.seed(72)
# standard data.frame from R Base
mydf = data.frame(a = c("Paul", "Kim", "Nora", "Sue",
"Paul", "Kim"),
b = c("A", "A", "B", "B", "B", "C"),
c = rnorm(2)); mydf
mytable = data.table(a = c("Paul", "Kim", "Nora", "Sue",
"Paul", "Kim"),
b = c("A", "A", "B", "B", "B", "C"),
c = rnorm(2)); mytable
head(mydf)
sapply(mydf, class)
head(mytable)
sapply(mytable, class)
class(mytable)
head(mydf)
sapply(mydf, class)
class(mydf)
mydf[3,]
mytable[3,]
mydf[3]
mytable[3]
mydf[3]
mytable[,.(c)] # in this notation you will get a dt as ouput again
mytable[, list(c)] # gives the same output, . and list are aliases
mytable[,c] # use the column name, this is paramater j of dt syntax
class(mytable[,c])
cars <- read.table(
file = "./data/cars.csv",
header = TRUE,
sep = "\t",
quote = "\"")
cars <- read.table(
file = ".//data//cars.csv",
header = TRUE,
sep = "\t",
quote = "\"")
cars <- read.table(
file = "cars.csv",
header = TRUE,
sep = "\t",
quote = "\"")
?startup
?Startup
library(readr)
cars <- read_delim("__Code/Class/18_R/cars.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(cars)
class(cars)
temp <- select(
.data = cars,
Transmission,
Cylinders,
Fuel.Economy)
library(dplyr)
temp <- select(
.data = cars,
Transmission,
Cylinders,
Fuel.Economy)
head(temp)
temp <- filter(
.data = temp,
Transmission == "Automatic")
head(temp)
temp <- mutate(
.data = temp,
Consumption = Fuel.Economy * 0.425)
head(temp)
temp <- group_by(
.data = temp,
Cylinders)
head(temp)
# Aggregate based on groups
temp <- summarize(
.data = temp,
Avg.Consumption = mean(Consumption))
head(temp)
temp <- arrange(
.data = temp,
desc(Avg.Consumption))
head(temp)
efficiency <- as.data.frame(temp)
class(temp)
efficiency <- as.data.frame(temp)
class(efficiency)
print(efficiency)
efficiency <- cars %>%
select(Fuel.Economy, Cylinders, Transmission) %>%
filter(Transmission == "Automatic") %>%
mutate(Consumption = Fuel.Economy * 0.425) %>%
summarize(Avg.Consumption = mean(Consumption)) %>%
arrange(desc(Avg.Consumption)) %>%
as.data.frame()
print(efficiency)
library(readr)
cars <- read_delim("__Code/Class/18_R/data/cars.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(cars)
head(cars)
quantile(cars$Fuel.Economy)
cor(
x = cars$Cylinders,
y = cars$Fuel.Economy)
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of Cars by Transmission Type") +
xlab("Transmission Type") +
ylab("Count of Cars")
library(ggplot2)
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of Cars by Transmission Type") +
xlab("Transmission Type") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 10) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 110) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 30) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 10) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
fill=I('blue'),
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 10) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(
bins = 10) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_density() +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Density")
ggplot(
data = cars,
aes(
x = Cylinders,
y = Fuel.Economy)) +
geom_point() +
ggtitle("Fuel Economy by Cylinders") +
xlab("Number of Cylinders") +
ylab("Fuel Economy (mpg)")
library(ggplot2)
# Create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of Cars by Transmission Type") +
xlab("Transmission Type") +
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_density() +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Density")
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
disney_characters
presidents
numbers_vector
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
disney_characters
presidents
numbers_vector
# A for-loop
for (x in combined_vector){
print(x)
}
a <- 3
typeof(a)
levels(fdata) = c('I','II','III')
presidents[1]
presidents[1]
# Numeric
a <- 3
b <- 3.1415
typeof(a)
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
disney_characters
presidents
numbers_vector
presidents[1]
combined_vector <- c(disney_characters, presidents)
combined_vector
combined_vector <- c(disney_characters, presidents)
combined_vector
combined_vector <- c(disney_characters, presidents)
combined_vector
combined_vector <- c(disney_characters, presidents)
combined_vector
# A for-loop
for (x in combined_vector){
print(x)
}
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
# nchar() returns the number of characters
for (prez in presidents){
if (nchar(prez) > 5){
next
}
else {
print(prez)
}
}
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=presidents,
"nums"=c(1,2,3,4,5),
"bools"=c(T,F,T,T,T,F)
)
# We can use the bracket notation to access an item in a list:
random_list["states"]
# Or use the $ sign
random_list$coins
# Verify type
typeof(random_list)
test <- 4
mydata.frame = data.frame(name = c("Paul", "Kim", "Nora", "Sue", "Pat", "Kyle"),
counts = c(3,5),
measurement=rnorm(6))
mydata.frame
class(mydata.frame)
class(mydata.frame)
library(dplyr)
doubleinfo <- data_frame(
name = c("Ted", "Pauline", "Vera", "Angela", "Frank", "Pam"),
biometrics = c("179m", "173f", "174f", "159f", "188m", "163f"),
measurement = rnorm(6)
)
doubleinfo = separate(data=doubleinfo, col=biometrics, into = c("height", "sex"), 3)
doubleinfo
class(doubleinfo)
perf <- data_frame(
name = c("Pam", "Pam", "Nick", "Nick", "Kyle", "Kyle"),
performance = c("top", "low", "top", "low", "top", "low"),
counts = c(13,4,12,2,9,5)
)
perf
perf = spread(data = perf, key=performance, value=counts)
perf
perf = spread(data = perf, key=performance, value=counts)
perf
doubleinfo = separate(data=doubleinfo, col=biometrics, into = c("height", "sex"), 3)
doubleinfo
perf <- data_frame(
name = c("Pam", "Pam", "Nick", "Nick", "Kyle", "Kyle"),
performance = c("top", "low", "top", "low", "top", "low"),
counts = c(13,4,12,2,9,5)
)
perf
perf = spread(data = perf, key=performance, value=counts)
perf
class(doubleinfo)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(tidyverse)
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
require("splitstackshape")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("xml2")
brew install libxml2
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
sample_csv <- read_csv("data.csv")
dir()
sample_csv <- read_csv("data.csv")
setwd("~/__Code/Class/18_R")
install.packages("tidyverse")
